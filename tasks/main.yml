---
# main task file
#
- name: ensure jail.conf contains jail stanza
  blockinfile:
    dest: /etc/jail.conf
    create: yes
    marker: "# {mark} Jail {{ jail_name }}"
    content: |
      {{ jail_name }} {
        host.hostname = {{ hostname }};
        {% if not jail_enable_vnet %}{% for opt in extra_opts_default %}  {{ opt.name }}{% if opt.option is defined %} = {{ opt.option }}{% endif %};
        {% endfor %}
        {% endif %}
        {% if jail_enable_vnet %}{% for opt in extra_opts_vnet %} {{ opt.name }}{% if opt.option is defined %} = "{{ opt.option }}"{% endif %}{% if opt.add_option is defined %} += "{{ opt.add_option }}"{% endif %};
        {% endfor %}
        {% endif %}
        {% if extra_opts is defined %}{% for opt in extra_opts %}  {{ opt.name }}{% if opt.option is defined %} = {{ opt.option }}{% endif %};
        {% endfor %}
        {% endif %}
      }

- name: ensure jail dataset
  include_role:
    name: bvansomeren.zfs
    tasks_from: dataset
  vars:
    zfs_dataset:
      parents: "{{ jail_dataset }}"
      name: "{{ jail_name }}"
      extra_zfs_properties: "{{ extra_zfs_properties }}"
  tags:
  - jail_dataset

- name: ensure base FreeBSD install
  command: tar -xf "{{ jail_freebsd_download }}/{{ item.file }}" -C "{{ jail_mountpoint }}"
  args:
    creates: "{{ jail_mountpoint }}/{{ item.creates }}"
  with_items: " {{ jail_default_install }}"
  register: freebsd_installed_in_jail

- name: ensure minimal configuration is in template
  copy:
    remote_src: yes
    src: "/{{ item }}"
    dest: "{{ jail_mountpoint }}/{{ item }}"
    force: no
  with_items: "{{ jail_minimal_conf }}"

- name: create optional zfs mounts
  include_role:
    name: bvansomeren.zfs
    tasks_from: dataset
  vars:
    zfs_dataset:
      name: "{{ item.name }}"
      extra_zfs_properties: "{{ item.extra_zfs_properties }}"
      parents: "{{ jail_dataset }}/{{ jail_name }}"
  with_items: "{{ jail_zfs_mounts }}"
  tags:
  - jail_extra_datasets

- name: optionally ensure jail receive further rc.conf changes
  command: sysrc -f {{ jail_mountpoint }}/etc/rc.conf {% for rc in jail_rc_defaults %} {{rc.name}}={{rc.value}}{% endfor %} creates={{ jail_mountpoint }}/etc/rc.conf

- name: optionally ensure jail receives vnet rc.conf changes
  command: sysrc -f {{ jail_mountpoint }}/etc/rc.conf {% for rc in jail_rc_defaults_vnet %} {{rc.name}}={{rc.value}}{% endfor %}
  when: jail_enable_vnet

- name: ensure jail rc.conf hostname using sysrc
  command: sysrc -f {{ jail_mountpoint }}/etc/rc.conf hostname={{ hostname }}
  register: sysrc_changed
  changed_when:  "'{{ hostname }} -> {{ hostname }}' not in sysrc_changed.stdout"

- name: setup nat for {{ jail_name }}
  include_role:
    name: bvansomeren.pf
    tasks_from: nat
  vars:
    pf_nat_name: "{{ jail_name }}"
    nat_ports: "{{ jail_nat_ports }}"
    pf_nat_ip: "{{ jail_ip }}"
  tags:
  - jail_nat

- name: setup rdr for {{ jail_name }}
  include_role:
    name: bvansomeren.pf
    tasks_from: rdr
  vars:
    pf_rdr_name: "{{ jail_name }}"
    pf_rdr_ports: "{{ jail_rdr_ports }}"
    pf_rdr_ip: "{{ jail_ip }}"

- name: force PF reload so that NAT works on install
  meta: flush_handlers
  when: freebsd_installed_in_jail|changed

- name: ensure jail is started
  command: service jail start

- name: wait until {{ jail_name }} is available before ploughing on
  wait_for:
    host: "{{ jail_ip }}"
    timeout: 5
    state: started
  delegate_to: "{{ inventory_hostname }}"

- name: ensure default packages are installed to {{ jail_name }}
  pkgng:
    name: "{{ default_packages }}"
    jail: "{{ jail_name }}"
    state: present

- name: ensure extra packages are installed to {{ jail_name }}
  pkgng:
    name: "{{ packages }}"
    jail: "{{ jail_name }}"
    state: present

- name: ensure services are enabled in jail
  command: jexec {{ jail_name }} sysrc {{ item }}_enable="YES"
  with_items: "{{ services }}"

- name: ensure services are started inside the jail
  service:
    name: "{{ item }}"
    state: started
    args: "-j {{ jail_name }}"
  with_items: "{{ services }}"

- include_tasks:
    file: users.yml
    apply:
      tags:
      - jailusers
  vars:
    jail_user: "{{ item }}"
  with_items: "{{ users }}"
  tags:
  - jailusers

- name: ensure wheel group in sudoers without password
  blockinfile:
    dest: "{{ jail_mountpoint }}/usr/local/etc/sudoers.d/wheel"
    create: yes
    content: |
      %wheel ALL=(ALL) NOPASSWD: ALL

- name: execute secondary roles
  include_role:
    name: "{{ item }}"
  with_items: "{{ jail_roles }}"
